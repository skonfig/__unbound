#!/bin/sh -e
#
# 2023 Dennis Camera (dennis.camera at riiengineering.ch)
#
# This file is part of the skonfig set __unbound.
#
# This set is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This set is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this set. If not, see <http://www.gnu.org/licenses/>.
#

version_ge() {
	printf '%s\n' "$1" "$2" | sort -t. -r -n | { read -r x; test "${x}" = "$1"; }
}

CONF_BASE_DIR=/etc/unbound
UNBOUND_CONF_DIR=${CONF_BASE_DIR:?}/unbound.conf.d

zone_name=${__object_id:?}

state_should=$(cat "${__object:?}/parameter/state")
# Generate slug to be used in file names
file_name_slug=$(printf '%s' "${zone_name}" | tr -c 'A-Za-z0-9-.' '_' | sed 's/\.$//')

test -n "${file_name_slug}" || {
	printf 'Slug generation failed for: %s\n' "${zone_name}" >&2
	test -n "${zone_name}" || printf 'Make sure the auth-zone\047s name is non-empty.\n' >&2
	exit 1
}

__directory "${CONF_BASE_DIR}" \
	--state pre-exists

require=__directory"${CONF_BASE_DIR}" \
__directory "${UNBOUND_CONF_DIR}" \
	--state present \
	--owner 0 --group 0 --mode 0755


config_file="${UNBOUND_CONF_DIR}/${file_name_slug}.auth-zone.conf"

read -r unbound_ver <"${__object:?}/explorer/unbound-version"
if version_ge "${unbound_ver:-0.0}" 1.17.1
then
	unbound_reload_command='unbound-control reload_keep_cache'
else
	unbound_reload_command='unbound-control reload'
fi

if test "${state_should}" != absent
then
	printf 'auth-zone:\n'
	printf '\tname: "%s"\n' "$(
		printf '%s\n' "${zone_name}" | sed -e "s/\"/\\\\&/g")"

	# boolean options
	bool_value() {
		# shellcheck disable=SC2046
		test $(case $1 in (no-*|not-*) echo '!' ;; esac) -f "${__object:?}/parameter/${1:?}" \
			&& echo yes || echo no
	}

	for _opt in \
		enable-fallback:fallback-enabled \
		not-for-downstream:for-downstream \
		not-for-upstream:for-upstream \
		check-zonemd:zonemd-check \
		zonemd-reject-absence
	do
		printf '\t%s: %s\n' ${_opt##*:} "$(bool_value ${_opt%%:*})"
	done

	# optional options
	# shellcheck disable=SC2043
	for _opt in zonefile
	do
		test -s "${__object:?}/parameter/${_opt}" || continue

		printf '\t%s: %s\n' "${_opt}" "$(cat "${__object:?}/parameter/${_opt}")"
	done

	# "multiple" options
	for _opt in primary url allow-notify
	do
		# Output options
		test -s "${__object:?}/parameter/${_opt}" || continue

		sed -e "s/^/	${_opt}: /" "${__object:?}/parameter/${_opt}"
	done
fi \
| require="__directory${UNBOUND_CONF_DIR}" \
  __file "${config_file}" \
	  --state "${state_should}" \
	  --owner 0 --group 0 --mode 0644 \
	  --source - \
	  --onchange "unbound-checkconf ${config_file:?} && if unbound-control status >/dev/null 2>&1; then ${unbound_reload_command:?}; fi"
# FIXME: the config file should only be updated if checkconf succeeds
